
几个核心类
Observer：观察者，负责接收结果
     相关子类：Subscriber、SafeSubscriber、ActionSubscriber等
Observable: 被观察者
OnSubsribe：在call中执行逻辑，调用observer的onNext、onComplete、onError。

执行流程：
一旦调用Observerable.subscribe()，就会将观察者封装成SafeSubscriber，然后调用Observable.onSubscribe.call(safeSubscriber)；



public interface Observer<T> { //观察者接口
    void onNext(T t);
    void onCompleted();
    void onError(Throwable e);
}

---------------订阅者---------------------
Observer
    ---Subscriber
        ---SafeSubscriber
        ---ActionSubsriber


public abstract class Subscriber<T> implements Observer<T>, Subscription {

    private static final long NOT_SET = Long.MIN_VALUE;

    private final SubscriptionList subscriptions;
    private final Subscriber<?> subscriber;
    private Producer producer;

    private long requested = NOT_SET;

    protected Subscriber() {
        this(null, false);
    }

    protected Subscriber(Subscriber<?> subscriber) {
        this(subscriber, true);
    }

    protected Subscriber(Subscriber<?> subscriber, boolean shareSubscriptions) {
        this.subscriber = subscriber;
        this.subscriptions = shareSubscriptions && subscriber != null ? subscriber.subscriptions : new SubscriptionList();
    }

    public final void add(Subscription s) {
        subscriptions.add(s);
    }

    @Override
    public final void unsubscribe() {
        subscriptions.unsubscribe();
    }

    @Override
    public final boolean isUnsubscribed() {
        return subscriptions.isUnsubscribed();
    }

    public void onStart() {

    }
 }

 public final class ActionSubscriber<T> extends Subscriber<T> {

     final Action1<? super T> onNext;
     final Action1<Throwable> onError;
     final Action0 onCompleted;

     public ActionSubscriber(Action1<? super T> onNext, Action1<Throwable> onError, Action0 onCompleted) {
         this.onNext = onNext;
         this.onError = onError;
         this.onCompleted = onCompleted;
     }

     @Override
     public void onNext(T t) {
         onNext.call(t);
     }

     @Override
     public void onError(Throwable e) {
         onError.call(e);
     }

     @Override
     public void onCompleted() {
         onCompleted.call();
     }
 }

 public class SafeSubscriber<T> extends Subscriber<T> {

     private final Subscriber<? super T> actual;

     boolean done = false;

     public SafeSubscriber(Subscriber<? super T> actual) {
         super(actual);
         this.actual = actual;
     }
 }

 ---------------被观察者------------------
 Function
     ----Action
         ----Action0...N
             ----OnSubscribe
     ----Func0....N

FuncX与ActionX的区别：
  FuncX有返回值，ActionX无返回值


 public class Observable<T> {

    final OnSubscribe<T> onSubscribe;

    //构造函数，只有一个，onSubscribe有很多子类，都会被包装进来
    protected Observable(OnSubscribe<T> f) {
        this.onSubscribe = f;
    }
    ------------------Observable的创建-----------------------------
    public static <T> Observable<T> create(OnSubscribe<T> f) {
        return new Observable<T>(hook.onCreate(f));
    }
    //方式1：onSubscribe的子类
    public static <T> Observable<T> from(Iterable<? extends T> iterable) {
        return create(new OnSubscribeFromIterable<T>(iterable));
    }
    //方式2：Observable的子类
    public static <T> Observable<T> just(final T value) {
        return ScalarSynchronousObservable.create(value);
    }
    -------------------事件订阅----------------------------
    //订阅Action, 将Action封装到ActionSubscriber中，ActionSubscriber继承于Subscriber
    public final Subscription subscribe(final Action1<? super T> onNext, final Action1<Throwable> onError, final Action0 onCompleted) {

        return subscribe(new ActionSubscriber<T>(onNext, onError, onCompleted));
    }
    public final Subscription subscribe(Subscriber<? super T> subscriber) {
        return Observable.subscribe(subscriber, this);
    }

    static <T> Subscription subscribe(Subscriber<? super T> subscriber, Observable<T> observable) {

        subscriber.onStart(); //回调onStart

        if (!(subscriber instanceof SafeSubscriber)) { //包装成SafeSubscriber
            subscriber = new SafeSubscriber<T>(subscriber);
        }

        try {
            // 允许hook拦截修改Observerable(Default Hook默认不做任何操作)
            // 调用Observer.onSubscribe.call()
            hook.onSubscribeStart(observable, observable.onSubscribe).call(subscriber);

            return hook.onSubscribeReturn(subscriber);
        } catch (Throwable e) {
            // 抛出异常
            Exceptions.throwIfFatal(e);

           //回调onError
            subscriber.onError(hook.onSubscribeError(e));

            return Subscriptions.unsubscribed();
        }
    }

 }


------------------操作符 Operator
RxJava 提供了对事件序列进行变换的支持，这是它的核心功能之一，也是大多数人说『RxJava 真是太好用了』的最大原因。
所谓变换，就是将事件序列中的对象或整个序列进行加工处理，转换成不同的事件或事件序列。
变换的目的：订阅者无需关心事件类型是如何产生的，被观察者会将源事件经过一系列转换，最终转换为订阅者需要的事件类型。

http://blog.chinaunix.net/uid-20771867-id-5187376.html

OperatorXX：操作符
    一般是用来包装转换Subscriber的
OnSubscribeXX ：发射数据源，内部一般还持有一个Producer，subscriber.setProducer(producer)，回调producer.request(n)方法
    OnSubscribeLift：
    onSubscribeFromArray：


------------------Subject
RxJava中常见的几种Subject
http://blog.csdn.net/dbs1215/article/details/52444196
PublishSubject、BehaviorSubject、ReplaySubject、AsyncSubject、SerializedSubject。
1、PublishSubject
订阅者只会接受订阅之后的来自PublishSubject发射的数据。
PublishSubject<Object> subject = PublishSubject.create();

  // observer1 will receive all onNext and onCompleted events
  subject.subscribe(observer1);
  subject.onNext("one");
  subject.onNext("two");

  // observer2 will only receive "three" and onCompleted
  subject.subscribe(observer2);
  subject.onNext("three");
  subject.onCompleted();
2、BehaviorSubject
BehaviorSubject会发送订阅之前的上一个值和之后的值
// observer will receive all events.
  BehaviorSubject<Object> subject = BehaviorSubject.create("default");
  subject.subscribe(observer); //接收到之后所有的onNext
  subject.onNext("one");
  subject.onNext("two");
  subject.onNext("three");

  // observer will receive the "one", "two" and "three" events, but not "zero"
  BehaviorSubject<Object> subject = BehaviorSubject.create("default");
  subject.onNext("zero");
  subject.onNext("one");
  subject.subscribe(observer); //接收到最近发送的one和之后的two、three
  subject.onNext("two");
  subject.onNext("three");

  // observer will receive only onCompleted
  BehaviorSubject<Object> subject = BehaviorSubject.create("default");
  subject.onNext("zero");
  subject.onNext("one");
  subject.onCompleted();
  subject.subscribe(observer); //接收到最近的onCompleted

  // observer will receive only onError
  BehaviorSubject<Object> subject = BehaviorSubject.create("default");
  subject.onNext("zero");
  subject.onNext("one");
  subject.onError(new RuntimeException("error"));
  subject.subscribe(observer); //接收到最近的onError
3、ReplaySubject
该Subject会缓存所有的发射数据，无论观察者何时订阅，Subject都会将所有内容发送给订阅者。
 ReplaySubject<Object> subject = ReplaySubject.create();
  subject.onNext("one");
  subject.onNext("two");
  subject.onNext("three");
  subject.onCompleted();

  // observable1和observable2会接收到之前发射的所有onNext和onCompleted事件
  subject.subscribe(observer1);
  subject.subscribe(observer2);
4、AsyncSubject
概括的讲就是使用AsyncSubject无论发送多少个数据事件，观察者永远只能接受到最后一个数据(必须调用onComplete)。如果发送数据过程中出现错误，观察者仅仅接受到错误信息。
// observer will receive no onNext events because the subject.onCompleted() isn't called.
  AsyncSubject<Object> subject = AsyncSubject.create();
  subject.subscribe(observer);
  subject.onNext("one");
  subject.onNext("two");
  subject.onNext("three"); //没有调用onComplete，所有不会接收到任何事件

  // observer will receive "three" as the only onNext event.
  AsyncSubject<Object> subject = AsyncSubject.create();
  subject.subscribe(observer);
  subject.onNext("one");
  subject.onNext("two");
  subject.onNext("three");
  subject.onCompleted(); //调用了onCompleted，可以接收到最后一次发射的onNext

5、SerializedSubject
Wraps a Subject so that it is safe to call its various on methods from different threads.
在多线程环境下，调用subject的onXX()是不安全的，SerializedSubject可将一个Subject转换为线程安全的。
SerializedSubject safeSubject = new SerializedSubject( myUnsafeSubject );

修改记录3






